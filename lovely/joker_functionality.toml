[manifest]
version = "1.0.0"
dump_lua = true
priority = 21

### Gallade and Mega Gallade

# Gallade Planet Insert
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
function level_up_hand(card, hand, instant, amount)
'''
position = "after"
payload = '''
    if next(SMODS.find_card('j_nacho_gallade')) and card.ability and card.ability.set == 'Planet' then
        return true
    end
'''
match_indent = true


# Mega Gallade Hand Debuff Logic
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''
if self.disabled then return end
    local obj = self.config.blind
    if obj.debuff_hand and type(obj.debuff_hand) == 'function' then
'''
position = "before"
payload = '''
    if next(SMODS.find_card('j_nacho_mega_gallade')) then return end
'''
match_indent = true

### Audino
# Extra Levels at end of Round
[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "functions/pokefunctions.lua"]'
pattern = '''
card.ability.extra.rounds = card.ability.extra.rounds - 1
'''
position = "after"
payload = '''
for k, v in pairs(G.jokers.cards) do if v.config.center_key == 'j_nacho_audino' and not v.debuff then card.ability.extra.rounds = card.ability.extra.rounds - 1 end end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "functions/pokefunctions.lua"]'
pattern = '''
card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = localize("poke_evolve_level")})
'''
position = "after"
payload = '''
for k, v in pairs(G.jokers.cards) do if v.config.center_key == 'j_nacho_audino' and not v.debuff then card_eval_status_text(context.blueprint_card or card, 'extra', nil, nil, nil, {message = localize("poke_evolve_level")}) end end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "functions/pokefunctions.lua"]'
pattern = '''
card:set_ability(new_card, true)
card:set_cost()
'''
position = "after"
payload = '''

if G.P_CENTERS[to_key].rarity ~= "poke_mega" and G.P_CENTERS[old_key].rarity ~= "poke_mega" then SMODS.calculate_context({poke_evolved = true}) end
'''
match_indent = true

### Turtonator
# Turtonator Cerulean Bell Compat.
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''
forced_card.ability.forced_selection = true
'''
position = "after"
payload = '''
forced_card.ability.pokermon_forced_selection = true
'''
match_indent = true


### Passimian
# Passimian Evo Logic
[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "functions/pokefunctions.lua"]'
pattern = '''
if immediate then
    poke_backend_evolve(card, to_key)
  else
'''
position = "before"
payload = '''
if card.config.center.key == 'j_nacho_passimian' then
    immediate = true
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "functions/pokefunctions.lua"]'
pattern = '''local custom_values_to_keep = {}'''
position = "before"
payload = '''
-- Passimian passed abilities don't "Evolve" per se
if card.config.center.key == 'j_nacho_passimian' then
  card.config.center:receive_card(card, to_key)
  return
end

'''
match_indent = true

# Ensuring Passimian is Energy Compatible
[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "functions/energyfunctions.lua"]'
pattern = '''card.ability.extra[name] =  data + (card.config.center.config.extra[name] * addition) * (card.ability.extra.escale or 1)'''
position = "at"
payload = '''
if card.config.center.key == 'j_nacho_passimian' then
  card.ability.extra[name] =  data + (card.ability.received_card.config.extra[name] * addition) * (card.ability.extra.escale or 1)
else
  card.ability.extra[name] =  data + (card.config.center.config.extra[name] * addition) * (card.ability.extra.escale or 1)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "functions/energyfunctions.lua"]'
pattern = '''
if (card.ability.extra.ptype ~= "Colorless" and not card.ability.colorless_sticker) and etype == "Colorless" then
  card.ability.extra[name] = data + (card.config.center.config.extra[name] * addition/2) * (card.ability.extra.escale or 1)
else
  card.ability.extra[name] = data + (card.config.center.config.extra[name] * addition) * (card.ability.extra.escale or 1)
end
'''
position = "at"
payload = '''
if card.config.center.key == 'j_nacho_passimian' then
  if (card.ability.extra.ptype ~= "Colorless" and not card.ability.colorless_sticker) and etype == "Colorless" then
    card.ability.extra[name] = data + (card.ability.received_card.config.extra[name] * addition/2) * (card.ability.extra.escale or 1)
  else
    card.ability.extra[name] = data + (card.ability.received_card.config.extra[name] * addition) * (card.ability.extra.escale or 1)
  end
else
  if (card.ability.extra.ptype ~= "Colorless" and not card.ability.colorless_sticker) and etype == "Colorless" then
    card.ability.extra[name] = data + (card.config.center.config.extra[name] * addition/2) * (card.ability.extra.escale or 1)
  else
    card.ability.extra[name] = data + (card.config.center.config.extra[name] * addition) * (card.ability.extra.escale or 1)
  end
end
'''
match_indent = true

# Ensure Smeargle finds Passimian's *Copied* Card so it doesn't crash
[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "pokemon/pokejokers_08.lua"]'
pattern = '''
local other_center = card.ability.extra.copy_joker.config.center
local new_config = copy_table(card.ability.extra.copy_joker.ability)
'''
position = "at"
payload = '''
local other_center
local new_config
if card.ability.extra.copy_joker.config.center.key == 'j_nacho_passimian' then
  other_center = card.ability.extra.copy_joker.ability.received_card
  new_config = copy_table(card.ability.extra.copy_joker.ability.received_card.config)
else
  other_center = card.ability.extra.copy_joker.config.center
  new_config = copy_table(card.ability.extra.copy_joker.ability)
end
'''
match_indent = true

# Make sure the Mega Stone *doesn't* see Passimian
[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "consumables/mart1.lua"]'
pattern = '''card_eval_status_text(card, 'extra', nil, nil, nil, {message = localize('k_reset')})'''
position = "before"
payload = '''
for k, v in pairs(G.jokers.cards) do
  if v.ability and v.ability.received_card and v.ability.received_card.key == card.ability.extra.used_on then card.ability.extra.used_on = nil end
end
'''
match_indent = true


### Terapagos
# Ensuring that Terapagos-Stellar makes Pokemon always Tera Stellar
[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "functions/pokefunctions.lua"]'
pattern = '''
if sticker_type then
    apply_type = sticker_type
'''
position = "before"
payload = '''
if next(SMODS.find_card('j_nacho_terapagos_stellar')) then
    sticker_type = "Stellar"
end
'''
match_indent = true



### Ralts Cross-Mod Compat.
# Yoinking Ralts from Mael if both Ralts are enabled
[[patches]]
[patches.pattern]
target = '=[SMODS PokermonMaelmc "main.lua"]'
pattern = '''
--Load consumables
'''
position = "before"
payload = '''
if (SMODS.Mods["PokermonMaelmc"] or {}).can_load and (SMODS.Mods["NachosPokermonDip"] or {}).can_load and nacho_config.Ralts then
  local yoink_ralts = assert(SMODS.load_file("src/pokemon/0280_ralts.lua", "NachosPokermonDip"))()
  if yoink_ralts.enabled then yoink_ralts:init() end
end

'''
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS PokermonMaelmc "main.lua"]'
pattern = '''
pokermon.add_family({"ralts","kirlia","gardevoir","mega_gardevoir"})
'''
position = "at"
payload = '''
if not ((SMODS.Mods["NachosPokermonDip"] or {}).can_load and nacho_config.Ralts) then
  pokermon.add_family({"ralts","kirlia","gardevoir","mega_gardevoir"}) end
'''
match_indent = true